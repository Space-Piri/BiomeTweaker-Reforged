plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //Lombok
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    
    //Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

sourceSets {
	main {
		resources {
			srcDir 'src/generated/resources'
		}
	}
	datagen {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.biometweaker.refmap.json'
    config 'mixins.biometweaker.json'

    debug.verbose = true
    debug.export = true
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
	build_number = '0'
}

String semver = version_major + "." + version_minor + "." + build_number
version = minecraft_version + "-" + semver
group= artifact_group
archivesBaseName = artifact_basename

minecraft {
    mappings channel: project.mappings, version: project.mappings_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${archivesBaseName}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${archivesBaseName}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.remapRefMap', 'true'
			//property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/')

            mods {
                "${archivesBaseName}" {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    exclude '.cache'

    filesMatching("META-INF/mods.toml") {
        expand 'minecraft_version': project.minecraft_version, 'forge_version': project.forge_version
        filter { line ->
            line.replace('version="0.0.0"', "version=\"$version\"")
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output

    manifest {
        attributes([
            "Specification-Title"     : "BiomeTweaker",
            "Specification-Vendor"    : "superckl",
            "Specification-Version"   : "${semver}",
            "Implementation-Title"    : "${project.name}",
            "Implementation-Version"  : "${project.version}",
            "Implementation-Vendor"   : "superckl",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"            : "mixins.biometweaker.json"
        ])
    }
    
    finalizedBy('reobfJar') 
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

artifacts {
	archives sourcesJar
}